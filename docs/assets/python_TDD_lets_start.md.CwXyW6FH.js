import{_ as i,c as a,a1 as e,o as n}from"./chunks/framework.BAjNsQ49.js";const g=JSON.parse('{"title":"🧪 Test-Driven Development (TDD) in Python with Pytest","description":"","frontmatter":{},"headers":[],"relativePath":"python/TDD/lets_start.md","filePath":"python/TDD/lets_start.md","lastUpdated":1741491859000}'),t={name:"python/TDD/lets_start.md"};function h(l,s,p,k,r,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="🧪-test-driven-development-tdd-in-python-with-pytest" tabindex="-1">🧪 Test-Driven Development (TDD) in Python with Pytest <a class="header-anchor" href="#🧪-test-driven-development-tdd-in-python-with-pytest" aria-label="Permalink to &quot;🧪 Test-Driven Development (TDD) in Python with Pytest&quot;">​</a></h1><p>Let’s dive into <strong>Test-Driven Development (TDD)</strong>—a game-changing approach to writing reliable, maintainable code. Whether you&#39;re building a small script or a full-blown application, TDD can help you catch bugs early, write cleaner code, and sleep better at night. 😴</p><h2 id="🤔-what-is-tdd" tabindex="-1">🤔 What is TDD? <a class="header-anchor" href="#🤔-what-is-tdd" aria-label="Permalink to &quot;🤔 What is TDD?&quot;">​</a></h2><p>TDD is a development approach where you write tests <strong>before</strong> writing the actual code. It is like playing a video game: you set a goal (write a test), then figure out how to beat the level (write code), and keep trying until you win (pass the test). It’s a way to code smarter, not harder. Here&#39;s the TDD cycle in a nutshell:</p><ol><li><span style="color:red;"><strong>Red</strong></span>: Write a failing test.</li><li><span style="color:green;"><strong>Green</strong></span>: Write the minimum code to pass the test.</li><li><span style="color:blue;"><strong>Refactor</strong></span>: Improve the code while keeping the tests passing.</li></ol><p>This cycle ensures your code is well-tested and designed from the ground up. Plus, it’s a great way to avoid spaghetti code and catch bugs early. 🍝</p><h2 id="🚀-let-s-see-tdd-in-action" tabindex="-1">🚀 Let’s See TDD in Action! <a class="header-anchor" href="#🚀-let-s-see-tdd-in-action" aria-label="Permalink to &quot;🚀 Let’s See TDD in Action!&quot;">​</a></h2><p>Let’s build a simple <code>Superhero</code> class using TDD. We’ll start by writing a failing test, then write the code to make it pass, and finally refactor to improve the design.</p><h3 id="_1-red-phase-writing-a-failing-test" tabindex="-1">1. <strong>Red Phase: Writing a Failing Test</strong> <a class="header-anchor" href="#_1-red-phase-writing-a-failing-test" aria-label="Permalink to &quot;1. **Red Phase: Writing a Failing Test**&quot;">​</a></h3><p>First, we write a test for functionality that doesn’t exist yet. This is the <strong>Red Phase</strong>—our test will fail, and that’s okay!</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># test_superhero.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_hero_has_power</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Superhero(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Spider-Man&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero.add_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web-slinging&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hero.has_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web-slinging&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span></code></pre></div><p>Running this test will fail because we haven’t created the <code>Superhero</code> class yet. That’s exactly what we want in the Red Phase!</p><h3 id="_2-green-phase-making-the-test-pass" tabindex="-1">2. <strong>Green Phase: Making the Test Pass</strong> <a class="header-anchor" href="#_2-green-phase-making-the-test-pass" aria-label="Permalink to &quot;2. **Green Phase: Making the Test Pass**&quot;">​</a></h3><p>Now, we write the minimum code needed to make the test pass. This is the <strong>Green Phase</strong>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># superhero.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Superhero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, name):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.powers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add_power</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, power):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.powers.append(power)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> has_power</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, power):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> power </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.powers</span></span></code></pre></div><p>Our test should now pass! 🎉 We’ve implemented just enough code to satisfy the test.</p><h3 id="_3-refactor-phase-improving-the-code" tabindex="-1">3. <strong>Refactor Phase: Improving the Code</strong> <a class="header-anchor" href="#_3-refactor-phase-improving-the-code" aria-label="Permalink to &quot;3. **Refactor Phase: Improving the Code**&quot;">​</a></h3><p>With the test passing, we can safely refactor our code to improve its design. This is the <strong>Refactor Phase</strong>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># superhero.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Superhero</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, name):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hero name must be a string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.powers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Using a set for unique powers</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add_power</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, power):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(power, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Power must be a string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.powers.add(power.lower())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Normalize powers to lowercase</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> has_power</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, power):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(power, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Power must be a string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> power.lower() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.powers</span></span></code></pre></div><p>Here’s what we improved:</p><ul><li>Added input validation for <code>name</code> and <code>power</code>.</li><li>Used a <code>set</code> to store powers, ensuring no duplicates.</li><li>Normalized powers to lowercase for case-insensitive comparisons.</li></ul><h3 id="_4-adding-more-tests" tabindex="-1">4. <strong>Adding More Tests</strong> <a class="header-anchor" href="#_4-adding-more-tests" aria-label="Permalink to &quot;4. **Adding More Tests**&quot;">​</a></h3><p>Now that we’ve refactored, let’s add more tests to verify our improvements.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># test_superhero.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_power_case_insensitive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Superhero(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wonder Woman&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero.add_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Flying&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hero.has_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flying&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hero.has_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FLYING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_duplicate_powers_handled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Superhero(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Superman&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero.add_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flying&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero.add_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Flying&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero.add_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;FLYING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    assert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hero.powers) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_invalid_hero_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pytest.raises(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ValueError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Superhero(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>These tests ensure our refactoring works as expected and handles edge cases like:</p><ul><li>Case-insensitive power checks.</li><li>Duplicate powers.</li><li>Invalid input types.</li></ul><h2 id="🎉-why-tdd-rocks" tabindex="-1">🎉 Why TDD Rocks <a class="header-anchor" href="#🎉-why-tdd-rocks" aria-label="Permalink to &quot;🎉 Why TDD Rocks&quot;">​</a></h2><p>By following the TDD cycle, you’ll:</p><ul><li><strong>Catch bugs early</strong>: Tests act as a safety net, catching issues before they become problems.</li><li><strong>Write cleaner code</strong>: TDD encourages modular, well-designed code.</li><li><strong>Gain confidence</strong>: With a suite of passing tests, you can refactor fearlessly.</li><li><strong>Document behavior</strong>: Tests serve as living documentation for your code.</li></ul>`,29)]))}const E=i(t,[["render",h]]);export{g as __pageData,E as default};
