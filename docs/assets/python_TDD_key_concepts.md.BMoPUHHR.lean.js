import{_ as i,c as a,a1 as e,o as n}from"./chunks/framework.BAjNsQ49.js";const E=JSON.parse('{"title":"ðŸ§© Key Concepts in TDD","description":"","frontmatter":{},"headers":[],"relativePath":"python/TDD/key_concepts.md","filePath":"python/TDD/key_concepts.md","lastUpdated":1741491859000}'),t={name:"python/TDD/key_concepts.md"};function h(l,s,p,k,r,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="ðŸ§©-key-concepts-in-tdd" tabindex="-1">ðŸ§© Key Concepts in TDD <a class="header-anchor" href="#ðŸ§©-key-concepts-in-tdd" aria-label="Permalink to &quot;ðŸ§© Key Concepts in TDD&quot;">â€‹</a></h1><h2 id="_1-unit-tests" tabindex="-1">1. Unit Tests <a class="header-anchor" href="#_1-unit-tests" aria-label="Permalink to &quot;1. Unit Tests&quot;">â€‹</a></h2><p>Unit tests are the building blocks of TDD. They test individual components (or &quot;units&quot;) of code in isolation. Think of them as tiny experiments to verify that each piece of code works as expected.</p><h4 id="the-given-when-then-structure" tabindex="-1">The <strong>GIVEN-WHEN-THEN</strong> Structure <a class="header-anchor" href="#the-given-when-then-structure" aria-label="Permalink to &quot;The **GIVEN-WHEN-THEN** Structure&quot;">â€‹</a></h4><p>To write clear and effective tests, use the <strong>GIVEN-WHEN-THEN</strong> structure:</p><ul><li><strong>GIVEN</strong>: Set up the initial conditions for the test.</li><li><strong>WHEN</strong>: Execute the behavior youâ€™re testing.</li><li><strong>THEN</strong>: Verify the expected outcome.</li></ul><p>For example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_hero_has_power</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    GIVEN a Superhero with a specific power added to them</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    WHEN we check if the hero has the power</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    THEN it should confirm the power exists</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # GIVEN: A superhero and a specific power added to them</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Superhero(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Spider-Man&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero.add_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web-slinging&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # WHEN: We check if the hero has the power</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    has_power </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hero.has_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web-slinging&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # THEN: It should confirm the power exists</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> has_power </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span></code></pre></div><h2 id="_2-test-independence" tabindex="-1">2. Test Independence <a class="header-anchor" href="#_2-test-independence" aria-label="Permalink to &quot;2. Test Independence&quot;">â€‹</a></h2><p>Each test should be independent of others. This means:</p><ul><li>No shared state between tests.</li><li>Each test should focus on one specific behavior.</li><li>Tests should pass or fail on their own, without relying on other tests.</li></ul><p>For example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_hero_has_power</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    GIVEN a Superhero with a specific power added to them</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    WHEN we check if the hero has the power</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    THEN it should confirm the power exists</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Superhero(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Spider-Man&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero.add_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web-slinging&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hero.has_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web-slinging&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_hero_remove_power</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    GIVEN a Superhero with a specific power</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    WHEN the power is removed</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    THEN the hero should no longer have that power</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Superhero(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero.add_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lightning control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    hero.remove_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lightning control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hero.has_power(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lightning control&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span></code></pre></div><h2 id="_3-keep-tests-short-and-focused" tabindex="-1">3. Keep Tests Short and Focused <a class="header-anchor" href="#_3-keep-tests-short-and-focused" aria-label="Permalink to &quot;3. Keep Tests Short and Focused&quot;">â€‹</a></h2><p>Tests should be small, fast, and easy to understand. If a test is too long or complex, itâ€™s a sign that your code might need refactoring.</p><p>For example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_add_hero_to_team</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    GIVEN a superhero team</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    WHEN a hero is added</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    THEN the team should include that hero</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    team </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SuperheroTeam(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Avengers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    team.add_hero(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hulk&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    assert</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hulk&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> team.members</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_team_size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    GIVEN a superhero team with multiple heroes</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    WHEN we check the team size</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    THEN it should return the correct number of members</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    team </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SuperheroTeam(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-Men&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    team.add_hero(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Wolverine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    team.add_hero(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Storm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> team.size() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><h2 id="first-principles-for-tests" tabindex="-1"><em>FIRST</em> Principles for Tests <a class="header-anchor" href="#first-principles-for-tests" aria-label="Permalink to &quot;_FIRST_ Principles for Tests&quot;">â€‹</a></h2><ul><li><strong>Fast:</strong> Tests should run quickly</li><li><strong>Independent:</strong> Tests shouldn&#39;t depend on each other</li><li><strong>Repeatable:</strong> Tests should give the same results each time</li><li><strong>Self-validating</strong>: Tests should automatically determine if they pass or fail</li><li><strong>Timely:</strong> Tests should be written just before the production code</li></ul><h3 id="key-takeaway" tabindex="-1">Key Takeaway <a class="header-anchor" href="#key-takeaway" aria-label="Permalink to &quot;Key Takeaway&quot;">â€‹</a></h3><ul><li>Write <strong>independent tests</strong> that donâ€™t rely on each other.</li><li>Keep tests <strong>short and focused</strong> on one specific behavior at a time. This makes debugging easier and ensures your tests are maintainable.</li></ul>`,21)]))}const c=i(t,[["render",h]]);export{E as __pageData,c as default};
