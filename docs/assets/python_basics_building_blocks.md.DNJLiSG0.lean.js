import{_ as i,c as a,a1 as t,o as e}from"./chunks/framework.BAjNsQ49.js";const c=JSON.parse('{"title":"üß± Python Objects: The Building Blocks of Everything","description":"","frontmatter":{},"headers":[],"relativePath":"python/basics/building_blocks.md","filePath":"python/basics/building_blocks.md","lastUpdated":1741491859000}'),n={name:"python/basics/building_blocks.md"};function h(l,s,p,k,o,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="üß±-python-objects-the-building-blocks-of-everything" tabindex="-1">üß± <strong>Python Objects: The Building Blocks of Everything</strong> <a class="header-anchor" href="#üß±-python-objects-the-building-blocks-of-everything" aria-label="Permalink to &quot;üß± **Python Objects: The Building Blocks of Everything**&quot;">‚Äã</a></h1><p>Before diving into the specifics of Python&#39;s syntax and features, it&#39;s crucial to understand one of the most fundamental concepts in Python: <strong>everything is an object</strong>. This design philosophy is what makes Python so consistent, flexible, and powerful. Let‚Äôs explore what this means and why it matters.</p><h2 id="üß†-what-is-an-object" tabindex="-1">üß† <strong>What is an Object?</strong> <a class="header-anchor" href="#üß†-what-is-an-object" aria-label="Permalink to &quot;üß† **What is an Object?**&quot;">‚Äã</a></h2><p>In Python, an <strong>object</strong> is a bundle of data (attributes) and behavior (methods). Every object has three key properties:</p><ol><li><strong>Identity</strong>: A unique identifier for the object (like its memory address). You can check it using the <code>id()</code> function.</li><li><strong>Type</strong>: The kind of object it is (e.g., <code>int</code>, <code>str</code>, <code>list</code>). You can check it using the <code>type()</code> function.</li><li><strong>Value</strong>: The actual data stored in the object.</li></ol><h3 id="example-objects-in-action" tabindex="-1"><strong>Example: Objects in Action</strong> <a class="header-anchor" href="#example-objects-in-action" aria-label="Permalink to &quot;**Example: Objects in Action**&quot;">‚Äã</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Let&#39;s create a string object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, Python!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check its identity, type, and value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Unique identifier (e.g., 140123456789)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Type: &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message)        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Value: Hello, Python!</span></span></code></pre></div><h2 id="üè∑Ô∏è-everything-is-an-object" tabindex="-1">üè∑Ô∏è <strong>Everything is an Object</strong> <a class="header-anchor" href="#üè∑Ô∏è-everything-is-an-object" aria-label="Permalink to &quot;üè∑Ô∏è **Everything is an Object**&quot;">‚Äã</a></h2><p>In Python, <strong>everything</strong> is an object. This includes:</p><ul><li><strong>Primitive types</strong> like integers, floats, and strings.</li><li><strong>Data structures</strong> like lists, tuples, sets, and dictionaries.</li><li><strong>Functions</strong> and <strong>classes</strong>.</li><li><strong>Modules</strong> and <strong>libraries</strong>.</li></ul><h3 id="example-even-functions-are-objects" tabindex="-1"><strong>Example: Even Functions are Objects</strong> <a class="header-anchor" href="#example-even-functions-are-objects" aria-label="Permalink to &quot;**Example: Even Functions are Objects**&quot;">‚Äã</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># A simple function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check its identity, type, and value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greet))      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Unique identifier (e.g., 140123456789)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greet))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Type: &lt;class &#39;function&#39;&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greet)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Value: &lt;function greet at 0x...&gt;</span></span></code></pre></div><h2 id="üîÑ-mutable-vs-immutable-objects" tabindex="-1">üîÑ <strong>Mutable vs Immutable Objects</strong> <a class="header-anchor" href="#üîÑ-mutable-vs-immutable-objects" aria-label="Permalink to &quot;üîÑ **Mutable vs Immutable Objects**&quot;">‚Äã</a></h2><p>Objects in Python can be classified into two categories based on whether their value can change after creation:</p><h3 id="_1-immutable-objects" tabindex="-1"><strong>1. Immutable Objects</strong> <a class="header-anchor" href="#_1-immutable-objects" aria-label="Permalink to &quot;**1. Immutable Objects**&quot;">‚Äã</a></h3><ul><li>Once created, their value <strong>cannot be changed</strong>.</li><li>Examples: <code>int</code>, <code>float</code>, <code>str</code>, <code>tuple</code>, <code>bool</code>, <code>frozenset</code>.</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Immutable exampleings</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Identity before modification</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; Smith&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Creates a new object</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Identity after modification (different from before)</span></span></code></pre></div><h3 id="_2-mutable-objects" tabindex="-1"><strong>2. Mutable Objects</strong> <a class="header-anchor" href="#_2-mutable-objects" aria-label="Permalink to &quot;**2. Mutable Objects**&quot;">‚Äã</a></h3><ul><li>Their value <strong>can be changed</strong> after creation.</li><li>Examples: <code>list</code>, <code>dict</code>, <code>set</code>.</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Mutable example: Lists</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Identity before modification</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">numbers.append(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Modifies the same object</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Identity after modification (same as before)</span></span></code></pre></div><h2 id="üõ†Ô∏è-how-objects-work-in-python" tabindex="-1">üõ†Ô∏è <strong>How Objects Work in Python</strong> <a class="header-anchor" href="#üõ†Ô∏è-how-objects-work-in-python" aria-label="Permalink to &quot;üõ†Ô∏è **How Objects Work in Python**&quot;">‚Äã</a></h2><h3 id="_1-object-creation" tabindex="-1"><strong>1. Object Creation</strong> <a class="header-anchor" href="#_1-object-creation" aria-label="Permalink to &quot;**1. Object Creation**&quot;">‚Äã</a></h3><p>When you create a variable in Python, you‚Äôre essentially creating an object and binding it to a name.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Creating an integer object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span></span></code></pre></div><h3 id="_2-object-identity" tabindex="-1"><strong>2. Object Identity</strong> <a class="header-anchor" href="#_2-object-identity" aria-label="Permalink to &quot;**2. Object Identity**&quot;">‚Äã</a></h3><p>Every object has a unique identity, which is its memory address. You can check it using the <code>id()</code> function.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Unique identifier (e.g., 140123456789)</span></span></code></pre></div><h3 id="_3-object-type" tabindex="-1"><strong>3. Object Type</strong> <a class="header-anchor" href="#_3-object-type" aria-label="Permalink to &quot;**3. Object Type**&quot;">‚Äã</a></h3><p>The type of an object determines what operations you can perform on it. You can check it using the <code>type()</code> function.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;class &#39;int&#39;&gt;</span></span></code></pre></div><h3 id="_4-object-value" tabindex="-1"><strong>4. Object Value</strong> <a class="header-anchor" href="#_4-object-value" aria-label="Permalink to &quot;**4. Object Value**&quot;">‚Äã</a></h3><p>The value is the actual data stored in the object.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 25</span></span></code></pre></div><h2 id="üí°-why-does-this-matter" tabindex="-1">üí° <strong>Why Does This Matter?</strong> <a class="header-anchor" href="#üí°-why-does-this-matter" aria-label="Permalink to &quot;üí° **Why Does This Matter?**&quot;">‚Äã</a></h2><p>Understanding that everything is an object helps you:</p><ul><li><strong>Write consistent code</strong>: Since everything behaves like an object, you can use the same principles across different parts of your code.</li><li><strong>Leverage Python‚Äôs flexibility</strong>: You can pass functions as arguments, add attributes to objects dynamically, and more.</li><li><strong>Debug effectively</strong>: Knowing how objects work helps you understand issues like mutability and memory management.</li></ul><h2 id="ü§î-common-gotchas" tabindex="-1">ü§î <strong>Common Gotchas</strong> <a class="header-anchor" href="#ü§î-common-gotchas" aria-label="Permalink to &quot;ü§î **Common Gotchas**&quot;">‚Äã</a></h2><ul><li><p><strong>Mutable Default Arguments</strong>: Be careful when using mutable objects (like lists) as default arguments in functions. They retain their state across function calls.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add_item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item, items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.append(item)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add_item(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [&#39;apple&#39;]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(add_item(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;banana&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># [&#39;apple&#39;, &#39;banana&#39;] (unexpected!)</span></span></code></pre></div></li><li><p><strong>Identity vs Equality</strong>: Use <code>is</code> to check identity (memory address) and <code>==</code> to check equality (value).</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># True (same value)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># False (different objects)</span></span></code></pre></div></li></ul>`,38)]))}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
